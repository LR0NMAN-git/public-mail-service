name: Build and Push Docker Image

on:
  push:
    tags:
      - 'v*.*.*'  # 匹配 v1.0.0, v2.1.3 等格式的标签

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Extract version from tag
      id: extract_version
      run: |
        # 从标签中提取版本号，去掉 'v' 前缀
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"

    - name: Update version in build.gradle
      run: |
        # 更新 build.gradle 中的版本号
        sed -i "s/version = '.*'/version = '${{ steps.extract_version.outputs.VERSION }}'/" build.gradle
        echo "Updated build.gradle version to: ${{ steps.extract_version.outputs.VERSION }}"
        # 验证版本号更新
        echo "Current version in build.gradle:"
        grep "version = " build.gradle
        
    - name: Make gradlew executable
      run: chmod +x ./gradlew
      
    - name: Build JAR with Gradle
      run: |
        ./gradlew clean bootJar
        # 验证生成的JAR文件
        echo "Generated JAR files:"
        ls -la build/libs/
        # 确认JAR文件名包含正确的版本号
        if [ ! -f "build/libs/mail-service-${{ steps.extract_version.outputs.VERSION }}.jar" ]; then
          echo "Error: Expected JAR file mail-service-${{ steps.extract_version.outputs.VERSION }}.jar not found"
          exit 1
        fi
        echo "✅ JAR file with correct version generated successfully"
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: |
          lr0n/mail-service:latest
          lr0n/mail-service:${{ steps.extract_version.outputs.VERSION }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.extract_version.outputs.VERSION }}
        body: |
          ## 🚀 Release ${{ steps.extract_version.outputs.VERSION }}
          
          ### 📦 Docker Images
          - `lr0n/mail-service:${{ steps.extract_version.outputs.VERSION }}`
          - `lr0n/mail-service:latest`
          
          ### 📋 Changes
          - 自动构建和发布 Docker 镜像
          - JAR 包版本同步为 ${{ steps.extract_version.outputs.VERSION }}
          
          ### 🐳 使用方法
          ```bash
          docker pull lr0n/mail-service:${{ steps.extract_version.outputs.VERSION }}
          ```
          
          或使用 docker-compose:
          ```yaml
          services:
            mail-service:
              image: lr0n/mail-service:${{ steps.extract_version.outputs.VERSION }}
          ```
        draft: false
        prerelease: false

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v3
      with:
        name: mail-service-${{ steps.extract_version.outputs.VERSION }}
        path: build/libs/mail-service-${{ steps.extract_version.outputs.VERSION }}.jar
        
    - name: Verify Docker build context
      run: |
        echo "Verifying files for Docker build:"
        echo "JAR file:"
        ls -la build/libs/
        echo "Startup script:"
        ls -la src/main/resources/scripts/startup.sh
        echo "Dockerfile:"
        cat Dockerfile | grep COPY
